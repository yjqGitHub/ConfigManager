<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetMonitor.Client</name>
    </assembly>
    <members>
        <member name="T:NetMonitor.Client.Browse.BrowseMessage">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：BrowseMessage.cs
            类属性：公共类（非静态）
            类功能描述：浏览信息(给调用方自己去创建)
            创建标识：yjq 2017/7/18 13:19:27
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Browse.BrowseMessage.#ctor">
            <summary>
            .ctor
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Browse.BrowseMessage.BrowseUrl">
            <summary>
            浏览地址
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Browse.BrowseMessage.BrowseFullUrl">
            <summary>
            完整地址
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Browse.BrowseMessage.UserAgent">
            <summary>
            用户信息
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Browse.BrowseMessage.RequestIP">
            <summary>
            请求IP
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Browse.BrowseMessage.HttpMethod">
            <summary>
            http请求方法
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Browse.BrowseMessage.ProjectName">
            <summary>
            项目名字
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Browse.BrowseMessage.WebSite">
            <summary>
            站点端口
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Browse.BrowseMessage.TimeElapsed">
            <summary>
            时间消耗
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Browse.BrowseMessage.TimeConsumerList">
            <summary>
            时间消耗类型
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Browse.BrowseMessage.AddTime">
            <summary>
            添加时间
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Browse.BrowseMessage.AddTimeElapsedInfo(NetMonitor.Client.Browse.TimeElapsedInfo)">
            <summary>
            添加消费信息
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:NetMonitor.Client.Browse.BrowseMessage.AddTimeElapsedList(System.Collections.Generic.IEnumerable{NetMonitor.Client.Browse.TimeElapsedInfo})">
            <summary>
            批量添加消费信息
            </summary>
            <param name="elapsedList">消费信息</param>
        </member>
        <member name="T:NetMonitor.Client.Browse.BrowseMonitor">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：BrowseMonitor.cs
            类属性：局部类（非静态）
            类功能描述：浏览监控
            创建标识：yjq 2017/7/18 13:57:33
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Browse.BrowseMonitor.AddBrowseInfo(NetMonitor.Client.Browse.BrowseMessage)">
            <summary>
            添加浏览信息
            </summary>
            <param name="info">浏览信息</param>
        </member>
        <member name="M:NetMonitor.Client.Browse.BrowseMonitor.IsNeedSend(NetMonitor.Client.Browse.BrowseMessage)">
            <summary>
            判断是否需要发送
            </summary>
            <param name="info">浏览信息</param>
            <returns>true表示需要发送</returns>
        </member>
        <member name="M:NetMonitor.Client.Browse.BrowseMonitor.Subscribe(System.Action{System.Collections.Generic.List{NetMonitor.Client.Browse.BrowseMessage}})">
            <summary>
            订阅消息
            </summary>
            <param name="actionHandle">消息处理方法</param>
        </member>
        <member name="T:NetMonitor.Client.Browse.BrowseMonitorHandle">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：BrowseMonitorHandle.cs
            类属性：局部类（静态）
            类功能描述：浏览监控处理
            创建标识：yjq 2017/7/18 13:58:08
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Browse.BrowseMonitorHandle.AddSendMessage(NetMonitor.Client.Browse.BrowseMessage)">
            <summary>
            添加要发送的信息
            </summary>
            <param name="logMessage"></param>
        </member>
        <member name="F:NetMonitor.Client.Browse.BrowseMonitorHandle._MessageList">
            <summary>
            消息列表
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Browse.BrowseMonitorHandle.MessageHandle(NetMonitor.Client.Browse.BrowseMessage)">
            <summary>
            信息处理的方法
            </summary>
            <param name="message">要处理的信息</param>
        </member>
        <member name="M:NetMonitor.Client.Browse.BrowseMonitorHandle.HaveNoCountHandle">
            <summary>
            没有新消息的时候处理方法
            </summary>
        </member>
        <member name="F:NetMonitor.Client.Browse.BrowseMonitorHandle._EXCHANGENAME">
            <summary>
            交换机名字
            </summary>
        </member>
        <member name="F:NetMonitor.Client.Browse.BrowseMonitorHandle._EXCHANGEROUTEKEY">
            <summary>
            路由的Key
            </summary>
        </member>
        <member name="F:NetMonitor.Client.Browse.BrowseMonitorHandle._QUEUENAME">
            <summary>
            默认队列名字
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Browse.BrowseMonitorHandle.SendMessage(System.Collections.Generic.List{NetMonitor.Client.Browse.BrowseMessage})">
            <summary>
            发送消息
            </summary>
            <param name="messageList">消息列表</param>
        </member>
        <member name="M:NetMonitor.Client.Browse.BrowseMonitorHandle.SubscribeMessage(System.Action{System.Collections.Generic.List{NetMonitor.Client.Browse.BrowseMessage}})">
            <summary>
            订阅消息
            </summary>
            <param name="handle">消息处理方法</param>
        </member>
        <member name="T:NetMonitor.Client.Browse.IBrowseMonitor">
            <summary>
            Copyright (C) 2017 yjq 版权所有。
            类名：IBrowseMonitor.cs
            类属性：公共类（非静态）
            类功能描述：IBrowseMonitor接口
            创建标识：yjq 2017/7/18 13:56:24
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Browse.IBrowseMonitor.AddBrowseInfo(NetMonitor.Client.Browse.BrowseMessage)">
            <summary>
            添加浏览信息
            </summary>
            <param name="info">浏览信息</param>
        </member>
        <member name="M:NetMonitor.Client.Browse.IBrowseMonitor.Subscribe(System.Action{System.Collections.Generic.List{NetMonitor.Client.Browse.BrowseMessage}})">
            <summary>
            订阅消息
            </summary>
            <param name="actionHandle">消息处理方法</param>
        </member>
        <member name="T:NetMonitor.Client.Browse.TimeElapsedInfo">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：TimeElapsedInfo.cs
            类属性：公共类（非静态）
            类功能描述：时间消耗信息
            创建标识：yjq 2017/7/18 13:24:35
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Browse.TimeElapsedInfo.TimeElapsedType">
            <summary>
            消耗类型
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Browse.TimeElapsedInfo.CallMemberName">
            <summary>
            调用方法
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Browse.TimeElapsedInfo.IsSuccess">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Browse.TimeElapsedInfo.Remark">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Browse.TimeElapsedInfo.TimeElapsed">
            <summary>
            消耗时间
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Browse.TimeElapsedInfo.AddTime">
            <summary>
            添加时间
            </summary>
        </member>
        <member name="T:NetMonitor.Client.Browse.TimeElapsedType">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：TimeElapsedType.cs
            类属性：公共类（非静态）
            类功能描述：时间消耗类型
            创建标识：yjq 2017/7/18 13:25:28
            </summary>
        </member>
        <member name="F:NetMonitor.Client.Browse.TimeElapsedType.NoSql">
            <summary>
            NoSql
            </summary>
        </member>
        <member name="F:NetMonitor.Client.Browse.TimeElapsedType.Cache">
            <summary>
            Cache
            </summary>
        </member>
        <member name="F:NetMonitor.Client.Browse.TimeElapsedType.Sql">
            <summary>
            Sql
            </summary>
        </member>
        <member name="F:NetMonitor.Client.Browse.TimeElapsedType.MQ">
            <summary>
            MQ
            </summary>
        </member>
        <member name="F:NetMonitor.Client.Browse.TimeElapsedType.HTTP">
            <summary>
            HTTP
            </summary>
        </member>
        <member name="F:NetMonitor.Client.Browse.TimeElapsedType.RPC">
            <summary>
            RPC
            </summary>
        </member>
        <member name="F:NetMonitor.Client.Browse.TimeElapsedType.Other">
            <summary>
            其它
            </summary>
        </member>
        <member name="T:NetMonitor.Client.BufferQueue`1">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：BufferQueue.cs
            类属性：局部类（非静态）
            类功能描述：单队列（需注意单例模式）
            创建标识：yjq 2017/7/18 9:23:09
            </summary>
        </member>
        <member name="M:NetMonitor.Client.BufferQueue`1.#ctor(System.Int32,System.Action{`0},System.Action)">
             <summary>
            
             </summary>
             <param name="maxWriteCount">允许写的最大数量</param>
             <param name="handleMessage">处理的方法</param>
             <param name="handNoCount">当前队列没有没有消息的处理方法，在单次处理完之后调用</param>
        </member>
        <member name="M:NetMonitor.Client.BufferQueue`1.EnqueueMessage(`0)">
            <summary>
            添加消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:NetMonitor.Client.Configs.BrowseMonitorConfig">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：BrowseMonitorConfig.cs
            类属性：公共类（非静态）
            类功能描述：浏览监控配置
            创建标识：yjq 2017/7/18 11:43:52
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Configs.BrowseMonitorConfig.MinElapsed">
            <summary>
            最小消耗时间
            </summary>
        </member>
        <member name="T:NetMonitor.Client.Configs.LoggerMonitorConfig">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：LoggerMonitorConfig.cs
            类属性：公共类（非静态）
            类功能描述：日志监控配置
            创建标识：yjq 2017/7/18 11:42:20
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Configs.LoggerMonitorConfig.MinLevel">
            <summary>
            日志发送的最低等级（1-5）
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Configs.LoggerMonitorConfig.MaxLevel">
            <summary>
            日志发送的最高等级（1-5）
            </summary>
        </member>
        <member name="T:NetMonitor.Client.Configs.SqlMonitorConifg">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：SqlMonitorConifg.cs
            类属性：公共类（非静态）
            类功能描述：SQL监控配置
            创建标识：yjq 2017/7/18 11:41:27
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Configs.SqlMonitorConifg.MinElapsed">
            <summary>
            最小消耗时间
            </summary>
        </member>
        <member name="T:NetMonitor.Client.Configs.MonitorConfig">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：MonitorConfig.cs
            类属性：局部类（非静态）
            类功能描述：监控配置
            创建标识：yjq 2017/7/11 17:38:02
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Configs.MonitorConfig.Instance">
            <summary>
            实例信息
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Configs.MonitorConfig.IsStart">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Configs.MonitorConfig.ProjectName">
            <summary>
            项目名字
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Configs.MonitorConfig.MQConfig">
            <summary>
            MQ配置信息
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Configs.MonitorConfig.LogConfig">
            <summary>
            日志配置
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Configs.MonitorConfig.SqlConifg">
            <summary>
            SQL配置
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Configs.MonitorConfig.BrowseConfig">
            <summary>
            浏览记录配置
            </summary>
        </member>
        <member name="T:NetMonitor.Client.DoubleBufferQueue`1">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：DoubleBufferQueue.cs
            类属性：公共类（非静态）
            类功能描述：双缓冲队列
            创建标识：yjq 2017/7/20 17:36:22
            </summary>
        </member>
        <member name="F:NetMonitor.Client.DoubleBufferQueue`1._writeQueue">
            <summary>
            写队列
            </summary>
        </member>
        <member name="F:NetMonitor.Client.DoubleBufferQueue`1._readQueue">
            <summary>
            读队列
            </summary>
        </member>
        <member name="F:NetMonitor.Client.DoubleBufferQueue`1._handleMessageAction">
            <summary>
            消息处理的方法
            </summary>
        </member>
        <member name="F:NetMonitor.Client.DoubleBufferQueue`1._handNoCountAction">
            <summary>
            当卡队列处理完毕的通知
            </summary>
        </member>
        <member name="F:NetMonitor.Client.DoubleBufferQueue`1._maxWriteCount">
            <summary>
            最大的写入数量
            </summary>
        </member>
        <member name="F:NetMonitor.Client.DoubleBufferQueue`1._isInProcessMessage">
            <summary>
            是否正在处理
            </summary>
        </member>
        <member name="M:NetMonitor.Client.DoubleBufferQueue`1.#ctor(System.Int32,System.Action{`0},System.Action)">
            <summary>
            .ctor
            </summary>
            <param name="maxWriteCount">写的最大数量，超出后，改变写入速度</param>
            <param name="handleMessageAction">处理消息的方法</param>
            <param name="handNoCountAction">当卡队列处理完毕的通知</param>
        </member>
        <member name="T:NetMonitor.Client.Extensions.ExceptionExtension">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：ExceptionExtension.cs
            类属性：公共类（非静态）
            类功能描述：异常扩展类
            创建标识：yjq 2017/7/17 15:39:14
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Extensions.ExceptionExtension.ToErrMsg(System.Exception,System.String)">
            <summary>
            获取错误异常信息
            </summary>
            <param name="ex">异常</param>
            <param name="memberName">出现异常的方法名字</param>
            <returns>错误异常信息</returns>
        </member>
        <member name="T:NetMonitor.Client.Logger.ILoggerMonitor">
            <summary>
            Copyright (C) 2017 yjq 版权所有。
            类名：ILoggerMonitor.cs
            类属性：公共类（非静态）
            类功能描述：ILoggerMonitor接口
            创建标识：yjq 2017/7/11 20:11:40
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Logger.ILoggerMonitor.Debug(System.String,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出调试日志信息
            </summary>
            <param name="msg">日志内容</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.ILoggerMonitor.Info(System.String,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出普通日志信息
            </summary>
            <param name="msg">日志内容</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.ILoggerMonitor.Warn(System.String,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出警告日志
            </summary>
            <param name="msg">日志内容</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.ILoggerMonitor.Warn(System.Exception,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出警告日志
            </summary>
            <param name="ex">异常信息</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.ILoggerMonitor.Warn(System.String,System.Exception,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出警告日志
            </summary>
            <param name="msg">描述</param>
            <param name="ex">异常信息</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.ILoggerMonitor.Error(System.String,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出错误日志
            </summary>
            <param name="msg">日志内容</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.ILoggerMonitor.Error(System.Exception,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出错误日志
            </summary>
            <param name="ex">异常信息</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.ILoggerMonitor.Error(System.String,System.Exception,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出错误日志
            </summary>
            <param name="msg">描述</param>
            <param name="ex">异常信息</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.ILoggerMonitor.Fatal(System.String,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出严重错误日志
            </summary>
            <param name="msg">日志内容</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.ILoggerMonitor.Fatal(System.Exception,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出严重错误日志
            </summary>
            <param name="ex">异常信息</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.ILoggerMonitor.Fatal(System.String,System.Exception,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出严重错误日志
            </summary>
            <param name="msg">描述</param>
            <param name="ex">异常信息</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.ILoggerMonitor.Subscribe(System.Action{System.Collections.Generic.List{NetMonitor.Client.Logger.LogMessage}})">
            <summary>
            订阅消息
            </summary>
            <param name="actionHandle">消息处理方法</param>
        </member>
        <member name="T:NetMonitor.Client.Logger.LoggerMessageHandle">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：LoggerMessageHandle.cs
            类属性：局部类（静态）
            类功能描述：日志消息处理
            创建标识：yjq 2017/7/18 12:05:07
            </summary>
        </member>
        <member name="F:NetMonitor.Client.Logger.LoggerMessageHandle._EXCHANGENAME">
            <summary>
            默认交换机名字
            </summary>
        </member>
        <member name="F:NetMonitor.Client.Logger.LoggerMessageHandle._QUEUENAME">
            <summary>
            默认队列名字
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Logger.LoggerMessageHandle.AddSendMessage(NetMonitor.Client.Logger.LogMessage)">
            <summary>
            添加要发送的信息
            </summary>
            <param name="logMessage"></param>
        </member>
        <member name="F:NetMonitor.Client.Logger.LoggerMessageHandle._MessageDic">
            <summary>
            消息列表
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Logger.LoggerMessageHandle.MessageHandle(NetMonitor.Client.Logger.LogMessage)">
            <summary>
            信息处理的方法
            </summary>
            <param name="message">要处理的信息</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.LoggerMessageHandle.HaveNoCountHandle">
            <summary>
            没有新消息的时候处理方法
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Logger.LoggerMessageHandle.SubscribeMessage(System.Action{System.Collections.Generic.List{NetMonitor.Client.Logger.LogMessage}})">
            <summary>
            订阅消息
            </summary>
            <param name="handle">消息处理方法</param>
        </member>
        <member name="T:NetMonitor.Client.Logger.LoggerMonitor">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：LoggerMonitor.cs
            类属性：局部类（非静态）
            类功能描述：
            创建标识：yjq 2017/7/18 9:24:34
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Logger.LoggerMonitor.Debug(System.String,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出调试日志信息
            </summary>
            <param name="msg">日志内容</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.LoggerMonitor.Error(System.Exception,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出错误日志
            </summary>
            <param name="ex">异常信息</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.LoggerMonitor.Error(System.String,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出错误日志
            </summary>
            <param name="msg">日志内容</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.LoggerMonitor.Error(System.String,System.Exception,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出错误日志
            </summary>
            <param name="msg">描述</param>
            <param name="ex">异常信息</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.LoggerMonitor.Fatal(System.Exception,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出严重错误日志
            </summary>
            <param name="ex">异常信息</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.LoggerMonitor.Fatal(System.String,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出严重错误日志
            </summary>
            <param name="msg">日志内容</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.LoggerMonitor.Fatal(System.String,System.Exception,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出严重错误日志
            </summary>
            <param name="msg">描述</param>
            <param name="ex">异常信息</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.LoggerMonitor.Info(System.String,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出普通日志信息
            </summary>
            <param name="msg">日志内容</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.LoggerMonitor.Warn(System.Exception,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出警告日志
            </summary>
            <param name="ex">异常信息</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.LoggerMonitor.Warn(System.String,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出警告日志
            </summary>
            <param name="msg">日志内容</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.LoggerMonitor.Warn(System.String,System.Exception,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            输出警告日志
            </summary>
            <param name="msg">描述</param>
            <param name="ex">异常信息</param>
            <param name="memberName">调用方法名字</param>
            <param name="loggerName">记录器名字</param>
            <param name="site">站点端口信息</param>
            <param name="peojectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Logger.LoggerMonitor.IsNeedSend(NetMonitor.Client.Logger.MessageType)">
            <summary>
            判断是否需要发送
            </summary>
            <param name="messageType">当前消息类型</param>
            <returns>true表示需要发送</returns>
        </member>
        <member name="M:NetMonitor.Client.Logger.LoggerMonitor.Subscribe(System.Action{System.Collections.Generic.List{NetMonitor.Client.Logger.LogMessage}})">
            <summary>
            订阅消息
            </summary>
            <param name="actionHandle">消息处理方法</param>
        </member>
        <member name="T:NetMonitor.Client.Logger.LogMessage">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：LogMessage.cs
            类属性：公共类（非静态）
            类功能描述：日志消息
            创建标识：yjq 2017/7/17 15:31:22
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Logger.LogMessage.ProjectName">
            <summary>
            项目名称
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Logger.LogMessage.LoggerName">
            <summary>
            记录器名字
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Logger.LogMessage.MessageType">
            <summary>
            日志消息类型
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Logger.LogMessage.WebSite">
            <summary>
            站点端口
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Logger.LogMessage.MemberName">
            <summary>
            调用方法名字
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Logger.LogMessage.Message">
            <summary>
            日志信息内容
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Logger.LogMessage.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Logger.LogMessage.CreateMessage(System.String,NetMonitor.Client.Logger.MessageType,System.String,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            创建信息内容
            </summary>
            <param name="loggerName">记录器名字</param>
            <param name="messageType">消息类型</param>
            <param name="message">消息内容</param>
            <param name="memberName">调用方法名字</param>
            <param name="sitePort">站点信息</param>
            <param name="peojectName">项目名字</param>
            <returns>LogMessage</returns>
        </member>
        <member name="M:NetMonitor.Client.Logger.LogMessage.CreateMessage(System.String,NetMonitor.Client.Logger.MessageType,System.Exception,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            创建信息内容
            </summary>
            <param name="loggerName">记录器名字</param>
            <param name="messageType">消息类型</param>
            <param name="ex">异常信息</param>
            <param name="memberName">调用方法名字</param>
            <param name="sitePort">站点信息</param>
            <param name="peojectName">项目名字</param>
            <returns>LogMessage</returns>
        </member>
        <member name="M:NetMonitor.Client.Logger.LogMessage.CreateMessage(System.String,NetMonitor.Client.Logger.MessageType,System.String,System.Exception,System.String,NetMonitor.Client.WebSitePort,System.String)">
            <summary>
            创建信息内容
            </summary>
            <param name="loggerName">记录器名字</param>
            <param name="messageType">消息类型</param>
            <param name="message">消息内容</param>
            <param name="exception">异常信息</param>
            <param name="memberName">调用方法名字</param>
            <param name="sitePort">站点信息</param>
            <param name="peojectName">项目名字</param>
            <returns>LogMessage</returns>
        </member>
        <member name="T:NetMonitor.Client.Logger.MessageType">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：MessageType.cs
            类属性：局部类（非静态）
            类功能描述：消息类型枚举
            创建标识：yjq 2017/7/17 15:29:03
            </summary>
        </member>
        <member name="F:NetMonitor.Client.Logger.MessageType.Debug">
             <summary>
            调试日志
             </summary>
        </member>
        <member name="F:NetMonitor.Client.Logger.MessageType.Info">
             <summary>
            普通日志
             </summary>
        </member>
        <member name="F:NetMonitor.Client.Logger.MessageType.Warn">
             <summary>
            警告日志
             </summary>
        </member>
        <member name="F:NetMonitor.Client.Logger.MessageType.Error">
             <summary>
            错误日志
             </summary>
        </member>
        <member name="F:NetMonitor.Client.Logger.MessageType.Fatal">
             <summary>
            严重错误日志
             </summary>
        </member>
        <member name="T:NetMonitor.Client.Sql.ISqlMonitor">
            <summary>
            Copyright (C) 2017 yjq 版权所有。
            类名：ISqlMonitor.cs
            类属性：公共类（非静态）
            类功能描述：ISqlMonitor接口
            创建标识：yjq 2017/7/18 11:17:01
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Sql.ISqlMonitor.AddFailSqlInfo(System.String,System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo},System.Double,System.String,System.String,System.String,System.String)">
            <summary>
            创建失败SQL信息
            </summary>
            <param name="sqlContent">sql内容</param>
            <param name="parameterList">参数列表</param>
            <param name="timeElapsed">消耗时间</param>
            <param name="commandType">执行类型</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="remark">备注</param>
            <param name="projectName">项目名字</param>
            <returns>SqlMessage</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.ISqlMonitor.AddSuccessSqlInfo(System.String,System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo},System.Double,System.String,System.String,System.String,System.String)">
            <summary>
            创建成功SQL信息
            </summary>
            <param name="sqlContent">sql内容</param>
            <param name="parameterList">参数列表</param>
            <param name="timeElapsed">消耗时间</param>
            <param name="commandType">执行类型</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="remark">备注</param>
            <param name="projectName">项目名字</param>
            <returns>SqlMessage</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.ISqlMonitor.AddSqlInfo(System.String,System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo},System.Double,System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            创建SQL信息
            </summary>
            <param name="sqlContent">sql内容</param>
            <param name="parameterList">参数列表</param>
            <param name="timeElapsed">消耗时间</param>
            <param name="commandType">执行类型</param>
            <param name="isSuccess">是否成功</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="remark">备注</param>
            <param name="projectName">项目名字</param>
            <returns>SqlMessage</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.ISqlMonitor.Monitor(System.Action,System.String,System.String,System.String,System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo},System.String)">
            <summary>
            监控sql执行
            </summary>
            <param name="excuteSqlAction">执行的方法</param>
            <param name="sqlContent">执行的脚本</param>
            <param name="commandType">脚本类型</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="parameterList">参数列表</param>
            <param name="projectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Sql.ISqlMonitor.Monitor(System.Action,System.String,System.String,System.String,System.Func{System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo}},System.String)">
            <summary>
            监控sql执行
            </summary>
            <param name="excuteSqlAction">执行的方法</param>
            <param name="sqlContent">执行的脚本</param>
            <param name="commandType">脚本类型</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="getParameterListAction">获取参数列表的方法</param>
            <param name="projectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Sql.ISqlMonitor.Monitor``1(System.Func{``0},System.String,System.String,System.String,System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo},System.String)">
            <summary>
            监控sql执行
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="excuteSqlAction">执行的方法</param>
            <param name="sqlContent">执行的脚本</param>
            <param name="commandType">脚本类型</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="parameterList">参数列表</param>
            <param name="projectName">项目名字</param>
            <returns>方法返回值</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.ISqlMonitor.Monitor``1(System.Func{``0},System.String,System.String,System.String,System.Func{System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo}},System.String)">
            <summary>
            监控sql执行
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="excuteSqlAction">执行的方法</param>
            <param name="sqlContent">执行的脚本</param>
            <param name="commandType">脚本类型</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="getParameterListAction">获取参数列表的方法</param>
            <param name="projectName">项目名字</param>
            <returns>方法返回值</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.ISqlMonitor.MonitorAsync(System.Func{System.Threading.Tasks.Task},System.String,System.String,System.String,System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo},System.String)">
            <summary>
            监控sql执行(异步)
            </summary>
            <param name="excuteSqlAction">执行的方法(异步)</param>
            <param name="sqlContent">执行的脚本</param>
            <param name="commandType">脚本类型</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="parameterList">参数列表</param>
            <param name="projectName">项目名字</param>
            <returns>执行任务(可等待)</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.ISqlMonitor.MonitorAsync(System.Func{System.Threading.Tasks.Task},System.String,System.String,System.String,System.Func{System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo}},System.String)">
            <summary>
            监控sql执行(异步)
            </summary>
            <param name="excuteSqlAction">执行的方法(异步)</param>
            <param name="sqlContent">执行的脚本</param>
            <param name="commandType">脚本类型</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="getParameterListAction">获取参数列表的方法</param>
            <param name="projectName">项目名字</param>
            <returns>执行任务(可等待)</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.ISqlMonitor.MonitorAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.String,System.String,System.String,System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo},System.String)">
            <summary>
            监控sql执行(异步)
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="excuteSqlAction">执行的方法(异步)</param>
            <param name="sqlContent">执行的脚本</param>
            <param name="commandType">脚本类型</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="parameterList">参数列表</param>
            <param name="projectName">项目名字</param>
            <returns>执行任务(可等待)</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.ISqlMonitor.MonitorAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.String,System.String,System.String,System.Func{System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo}},System.String)">
            <summary>
            监控sql执行(异步)
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="excuteSqlAction">执行的方法(异步)</param>
            <param name="sqlContent">执行的脚本</param>
            <param name="commandType">脚本类型</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="getParameterListAction">参数列表</param>
            <param name="projectName">项目名字</param>
            <returns>执行任务(可等待)</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.ISqlMonitor.Subscribe(System.Action{System.Collections.Generic.List{NetMonitor.Client.Sql.SqlMessage}})">
            <summary>
            订阅消息
            </summary>
            <param name="actionHandle">消息处理方法</param>
        </member>
        <member name="T:NetMonitor.Client.Sql.ParameterInfo">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：ParameterInfo.cs
            类属性：公共类（非静态）
            类功能描述：参数信息
            创建标识：yjq 2017/7/18 18:46:54
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Sql.ParameterInfo.ParameterName">
            <summary>
            参数名字
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Sql.ParameterInfo.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Sql.ParameterInfo.ParameterDirection">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Sql.ParameterInfo.DbType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Sql.ParameterInfo.Size">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Sql.ParameterInfo.Scale">
            <summary>
            获取或设置所解析的 Value 的小数位数。
            </summary>
        </member>
        <member name="T:NetMonitor.Client.Sql.SqlInfo">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：SqlInfo.cs
            类属性：公共类（非静态）
            类功能描述：
            创建标识：yjq 2017/7/20 16:38:44
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Sql.SqlInfo.SqlContent">
            <summary>
            Sql内容
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Sql.SqlInfo.CommandType">
            <summary>
            执行类型【sql、存储过程】
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Sql.SqlInfo.ParameterList">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Sql.SqlInfo.IsSuccess">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Sql.SqlInfo.TimeElapsed">
            <summary>
            消耗时间
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Sql.SqlInfo.Remark">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Sql.SqlInfo.DataBaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="T:NetMonitor.Client.Sql.SqlMessage">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：SqlMessage.cs
            类属性：公共类（非静态）
            类功能描述：SQL信息
            创建标识：yjq 2017/7/18 11:11:53
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMessage.#ctor">
            <summary>
            .ctor
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Sql.SqlMessage.ProjectName">
            <summary>
            项目名称
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Sql.SqlMessage.SqlInfo">
            <summary>
            Sql信息
            </summary>
        </member>
        <member name="P:NetMonitor.Client.Sql.SqlMessage.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMessage.CreateSuccess(System.String,System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo},System.Double,System.String,System.String,System.String,System.String)">
            <summary>
            创建成功SQL信息
            </summary>
            <param name="sqlContent">sql内容</param>
            <param name="parameterList">参数列表</param>
            <param name="timeElapsed">消耗时间</param>
            <param name="commandType">执行类型</param>
            <param name="remark">备注</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="projectName">项目名字</param>
            <returns>SqlMessage</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMessage.CreateFail(System.String,System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo},System.Double,System.String,System.String,System.String,System.String)">
            <summary>
            创建失败SQL信息
            </summary>
            <param name="sqlContent">sql内容</param>
            <param name="parameterList">参数列表</param>
            <param name="timeElapsed">消耗时间</param>
            <param name="commandType">执行类型</param>
            <param name="remark">备注</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="projectName">项目名字</param>
            <returns>SqlMessage</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMessage.CreateMessage(System.String,System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo},System.Double,System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            创建SQL信息
            </summary>
            <param name="sqlContent">sql内容</param>
            <param name="parameterList">参数列表</param>
            <param name="timeElapsed">消耗时间</param>
            <param name="commandType">执行类型</param>
            <param name="isSuccess">是否成功</param>
            <param name="remark">备注</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="projectName">项目名字</param>
            <returns>SqlMessage</returns>
        </member>
        <member name="T:NetMonitor.Client.Sql.SqlMonitor">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：SqlMonitor.cs
            类属性：公共类（非静态）
            类功能描述：
            创建标识：yjq 2017/7/18 11:16:10
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMonitor.AddFailSqlInfo(System.String,System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo},System.Double,System.String,System.String,System.String,System.String)">
            <summary>
            创建失败SQL信息
            </summary>
            <param name="sqlContent">sql内容</param>
            <param name="parameterList">参数列表</param>
            <param name="timeElapsed">消耗时间</param>
            <param name="commandType">执行类型</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="remark">备注</param>
            <param name="projectName">项目名字</param>
            <returns>SqlMessage</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMonitor.AddSuccessSqlInfo(System.String,System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo},System.Double,System.String,System.String,System.String,System.String)">
            <summary>
            创建成功SQL信息
            </summary>
            <param name="sqlContent">sql内容</param>
            <param name="parameterList">参数列表</param>
            <param name="timeElapsed">消耗时间</param>
            <param name="commandType">执行类型</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="remark">备注</param>
            <param name="projectName">项目名字</param>
            <returns>SqlMessage</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMonitor.AddSqlInfo(System.String,System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo},System.Double,System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            创建SQL信息
            </summary>
            <param name="sqlContent">sql内容</param>
            <param name="parameterList">参数列表</param>
            <param name="timeElapsed">消耗时间</param>
            <param name="commandType">执行类型</param>
            <param name="isSuccess">是否成功</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="remark">备注</param>
            <param name="projectName">项目名字</param>
            <returns>SqlMessage</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMonitor.Monitor(System.Action,System.String,System.String,System.String,System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo},System.String)">
            <summary>
            监控sql执行
            </summary>
            <param name="excuteSqlAction">执行的方法</param>
            <param name="sqlContent">执行的脚本</param>
            <param name="commandType">脚本类型</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="parameterList">参数列表</param>
            <param name="projectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMonitor.Monitor(System.Action,System.String,System.String,System.String,System.Func{System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo}},System.String)">
            <summary>
            监控sql执行
            </summary>
            <param name="excuteSqlAction">执行的方法</param>
            <param name="sqlContent">执行的脚本</param>
            <param name="commandType">脚本类型</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="getParameterListAction">获取参数列表的方法</param>
            <param name="projectName">项目名字</param>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMonitor.Monitor``1(System.Func{``0},System.String,System.String,System.String,System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo},System.String)">
            <summary>
            监控sql执行
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="excuteSqlAction">执行的方法</param>
            <param name="sqlContent">执行的脚本</param>
            <param name="commandType">脚本类型</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="parameterList">参数列表</param>
            <param name="projectName">项目名字</param>
            <returns>方法返回值</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMonitor.Monitor``1(System.Func{``0},System.String,System.String,System.String,System.Func{System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo}},System.String)">
            <summary>
            监控sql执行
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="excuteSqlAction">执行的方法</param>
            <param name="sqlContent">执行的脚本</param>
            <param name="commandType">脚本类型</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="getParameterListAction">获取参数列表的方法</param>
            <param name="projectName">项目名字</param>
            <returns>方法返回值</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMonitor.MonitorAsync(System.Func{System.Threading.Tasks.Task},System.String,System.String,System.String,System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo},System.String)">
            <summary>
            监控sql执行(异步)
            </summary>
            <param name="excuteSqlAction">执行的方法(异步)</param>
            <param name="sqlContent">执行的脚本</param>
            <param name="commandType">脚本类型</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="parameterList">参数列表</param>
            <param name="projectName">项目名字</param>
            <returns>执行任务(可等待)</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMonitor.MonitorAsync(System.Func{System.Threading.Tasks.Task},System.String,System.String,System.String,System.Func{System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo}},System.String)">
            <summary>
            监控sql执行(异步)
            </summary>
            <param name="excuteSqlAction">执行的方法(异步)</param>
            <param name="sqlContent">执行的脚本</param>
            <param name="commandType">脚本类型</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="getParameterListAction">获取参数列表的方法</param>
            <param name="projectName">项目名字</param>
            <returns>执行任务(可等待)</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMonitor.MonitorAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.String,System.String,System.String,System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo},System.String)">
            <summary>
            监控sql执行(异步)
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="excuteSqlAction">执行的方法(异步)</param>
            <param name="sqlContent">执行的脚本</param>
            <param name="commandType">脚本类型</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="parameterList">参数列表</param>
            <param name="projectName">项目名字</param>
            <returns>执行任务(可等待)</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMonitor.MonitorAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.String,System.String,System.String,System.Func{System.Collections.Generic.List{NetMonitor.Client.Sql.ParameterInfo}},System.String)">
            <summary>
            监控sql执行(异步)
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="excuteSqlAction">执行的方法(异步)</param>
            <param name="sqlContent">执行的脚本</param>
            <param name="commandType">脚本类型</param>
            <param name="dataBaseType">数据库类型</param>
            <param name="getParameterListAction">参数列表</param>
            <param name="projectName">项目名字</param>
            <returns>执行任务(可等待)</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMonitor.IsNeedSend(System.Double,System.Boolean)">
            <summary>
            判断是否需要发送
            </summary>
            <param name="timeElapsed">消耗时间</param>
            <param name="isSuccess">执行是否成功</param>
            <returns>true表示需要发送</returns>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMonitor.Subscribe(System.Action{System.Collections.Generic.List{NetMonitor.Client.Sql.SqlMessage}})">
            <summary>
            订阅消息
            </summary>
            <param name="actionHandle">消息处理方法</param>
        </member>
        <member name="T:NetMonitor.Client.Sql.SqlMonitorHandle">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：SqlMonitorHandle.cs
            类属性：局部类（静态）
            类功能描述：SQL监控处理
            创建标识：yjq 2017/7/18 12:15:26
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMonitorHandle.AddSendMessage(NetMonitor.Client.Sql.SqlMessage)">
            <summary>
            添加要发送的信息
            </summary>
            <param name="message"></param>
        </member>
        <member name="F:NetMonitor.Client.Sql.SqlMonitorHandle._MessageList">
            <summary>
            消息列表
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMonitorHandle.MessageHandle(NetMonitor.Client.Sql.SqlMessage)">
            <summary>
            信息处理的方法
            </summary>
            <param name="message">要处理的信息</param>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMonitorHandle.HaveNoCountHandle">
            <summary>
            没有新消息的时候处理方法
            </summary>
        </member>
        <member name="F:NetMonitor.Client.Sql.SqlMonitorHandle._EXCHANGENAME">
            <summary>
            交换机名字
            </summary>
        </member>
        <member name="F:NetMonitor.Client.Sql.SqlMonitorHandle._EXCHANGEROUTEKEY">
            <summary>
            路由的Key
            </summary>
        </member>
        <member name="F:NetMonitor.Client.Sql.SqlMonitorHandle._QUEUENAME">
            <summary>
            默认队列名字
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMonitorHandle.SendMessage(System.Collections.Generic.List{NetMonitor.Client.Sql.SqlMessage})">
            <summary>
            发送消息
            </summary>
            <param name="messageList">消息列表</param>
        </member>
        <member name="M:NetMonitor.Client.Sql.SqlMonitorHandle.SubscribeMessage(System.Action{System.Collections.Generic.List{NetMonitor.Client.Sql.SqlMessage}})">
            <summary>
            订阅消息
            </summary>
            <param name="handle">消息处理方法</param>
        </member>
        <member name="T:NetMonitor.Client.MonitorDisposable">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：MonitorDisposable.cs
            类属性：公共类（非静态）
            类功能描述：
            创建标识：yjq 2017/7/17 16:59:40
            </summary>
        </member>
        <member name="T:NetMonitor.Client.MonitorManage">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：MonitorManage.cs
            类属性：公共类（非静态）
            类功能描述：监控管理
            创建标识：yjq 2017/7/18 11:04:49
            </summary>
        </member>
        <member name="M:NetMonitor.Client.MonitorManage.StartMonitor(System.String)">
            <summary>
            开启使用监控
            </summary>
            <param name="configPath">配置文件路径</param>
        </member>
        <member name="M:NetMonitor.Client.MonitorManage.UnStallMonitor">
            <summary>
            程序停止时使用
            </summary>
        </member>
        <member name="M:NetMonitor.Client.MonitorManage.GetLogger">
            <summary>
            获取日志输出
            </summary>
            <returns>ILoggerMonitor</returns>
        </member>
        <member name="M:NetMonitor.Client.MonitorManage.GetSqlMonitor">
            <summary>
            获取Sql的监控
            </summary>
            <returns>ISqlMonitor</returns>
        </member>
        <member name="M:NetMonitor.Client.MonitorManage.GetBrowseMonitor">
            <summary>
            获取浏览监控
            </summary>
            <returns>IBrowseMonitor</returns>
        </member>
        <member name="T:NetMonitor.Client.MQ.IMQClient">
            <summary>
            Copyright (C) 2017 yjq 版权所有。
            类名：IMQClient.cs
            类属性：局部类（非静态）
            类功能描述：IMQClient接口
            创建标识：yjq 2017/7/17 16:03:46
            </summary>
        </member>
        <member name="M:NetMonitor.Client.MQ.IMQClient.Publish``1(``0,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            发送消息
            </summary>
            <typeparam name="T">消息类型</typeparam>
            <param name="command">消息内容</param>
            <param name="exchangeName">交换机名字</param>
            <param name="queueName">队列名</param>
            <param name="routingKey">路由关键字</param>
            <param name="exchangeType">交换机类型</param>
            <param name="durable">是否持久化</param>
            <param name="autoDelete">是否自动删除</param>
            <param name="exclusive">是否申明为排它队列</param>
            <param name="arguments">参数</param>
        </member>
        <member name="M:NetMonitor.Client.MQ.IMQClient.Subscribe``1(System.Action{``0},System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{``0,System.Exception},System.String,System.String)">
            <summary>
            订阅消息
            </summary>
            <typeparam name="T">消息类型</typeparam>
            <param name="actionHandle">处理该类型消息的方法</param>
            <param name="exchangeName">交换机名字</param>
            <param name="queueName">队列名</param>
            <param name="routingKey">路由关键字</param>
            <param name="exchangeType">交换机类型</param>
            <param name="durable">是否持久化</param>
            <param name="autoDelete">是否自动删除</param>
            <param name="exclusive">是否申明为排它队列</param>
            <param name="arguments">参数</param>
            <param name="errorActionHandle">处理消息时发生错误时处理方法</param>
            <param name="memberName">调用成员信息</param>
            <param name="loggerName">记录器名字</param>
        </member>
        <member name="T:NetMonitor.Client.MQ.IMQFactory">
            <summary>
            Copyright (C) 2017 yjq 版权所有。
            类名：IMQFactory.cs
            类属性：局部类（非静态）
            类功能描述：IMQFactory接口
            创建标识：yjq 2017/7/17 17:49:51
            </summary>
        </member>
        <member name="M:NetMonitor.Client.MQ.IMQFactory.Create(NetMonitor.Client.MQ.MQConfig)">
            <summary>
            创建MQ客户端
            </summary>
            <param name="mqConfig">MQ配置信息</param>
            <returns>MQ客户端</returns>
        </member>
        <member name="T:NetMonitor.Client.MQ.MQConfig">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：MQConfig.cs
            类属性：公共类（非静态）
            类功能描述：MQConfig
            创建标识：yjq 2017/7/17 16:08:19
            </summary>
        </member>
        <member name="P:NetMonitor.Client.MQ.MQConfig.HostName">
            <summary>
            borker地址
            </summary>
        </member>
        <member name="P:NetMonitor.Client.MQ.MQConfig.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:NetMonitor.Client.MQ.MQConfig.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:NetMonitor.Client.MQ.MQConfig.VirtualHost">
            <summary>
            虚拟地址
            </summary>
        </member>
        <member name="P:NetMonitor.Client.MQ.MQConfig.RequestedHeartbeat">
            <summary>
            心跳时间
            </summary>
        </member>
        <member name="P:NetMonitor.Client.MQ.MQConfig.NetworkRecoveryInterval">
            <summary>
            连接异常中断后，重连间隔时间
            </summary>
        </member>
        <member name="T:NetMonitor.Client.MQ.MQExchangeType">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：MQExchangeType.cs
            类属性：局部类（静态）
            类功能描述：消息队列交换机类型
            创建标识：yjq 2017/7/17 16:05:10
            </summary>
        </member>
        <member name="F:NetMonitor.Client.MQ.MQExchangeType.DIRECT">
            <summary>
            Exchange type used for AMQP direct exchanges.
            </summary>
        </member>
        <member name="F:NetMonitor.Client.MQ.MQExchangeType.FANOUT">
            <summary>
            Exchange type used for AMQP fanout exchanges.
            </summary>
        </member>
        <member name="F:NetMonitor.Client.MQ.MQExchangeType.HEASERS">
            <summary>
            Exchange type used for AMQP headers exchanges.
            </summary>
        </member>
        <member name="F:NetMonitor.Client.MQ.MQExchangeType.TOPICS">
            <summary>
            Exchange type used for AMQP topic exchanges.
            </summary>
        </member>
        <member name="T:NetMonitor.Client.MQ.RabbitMQ.RabbitMQClient">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：RabbitMQClient.cs
            类属性：局部类（非静态）
            类功能描述：
            创建标识：yjq 2017/7/17 17:00:29
            </summary>
        </member>
        <member name="P:NetMonitor.Client.MQ.RabbitMQ.RabbitMQClient.Channel">
            <summary>
            获取通道
            </summary>
        </member>
        <member name="M:NetMonitor.Client.MQ.RabbitMQ.RabbitMQClient.ExchangeDeclaare(System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            声明一个交换机
            </summary>
            <param name="exchangeName">交换机名字</param>
            <param name="exchangType">交换机类型
            Fanout Exchange – 不处理路由键。你只需要简单的将队列绑定到交换机上。一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。Fanout交换机转发消息是最快的。
            Direct Exchange：处理路由键。需要将一个队列绑定到交换机上，要求该消息与一个特定的路由键完全匹配。这是一个完整的匹配。如果一个队列绑定到该交换机上要求路由键 “dog”，则只有被标记为“dog”的消息才被转发，不会转发dog.puppy，也不会转发dog.guard，只会转发dog。
            Topic Exchange – 将路由键和某模式进行匹配。此时队列需要绑定要一个模式上。符号“#”匹配一个或多个词，符号“*”匹配不多不少一个词。因此“audit.#”能够匹配到“audit.irs.corporate”，但是“audit.*” 只会匹配到“audit.irs”。
            </param>
            <param name="durable">是否持久化</param>
            <param name="aotuDelete">是否自动删除</param>
            <param name="arguments">参数</param>
        </member>
        <member name="M:NetMonitor.Client.MQ.RabbitMQ.RabbitMQClient.QueueDeclare(System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            声明一个队列
            </summary>
            <param name="queueName">队列名字</param>
            <param name="durable">是否持久化</param>
            <param name="exclusive">是否为排它队列</param>
            <param name="autoDelete">是否自动删除</param>
            <param name="arguments">参数</param>
        </member>
        <member name="M:NetMonitor.Client.MQ.RabbitMQ.RabbitMQClient.BindQueue(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            将一个队列绑定到交换机上，也可以说是订阅某个关键词
            </summary>
            <param name="queueName">队列名字</param>
            <param name="exchangeName">交换机名字</param>
            <param name="routingKey">路由关键字信息</param>
            <param name="arguments">参数</param>
        </member>
        <member name="M:NetMonitor.Client.MQ.RabbitMQ.RabbitMQClient.CreateExchangeAndQueue(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            声明一个交换机、队列，并绑定对应关系
            </summary>
            <param name="exchangeName">交换机名字</param>
            <param name="queueName">队列名字</param>
            <param name="routingKey">路由关键字信息</param>
            <param name="exchangeType">交换机类型</param>
            <param name="durable">是否持久化</param>
            <param name="exclusive">是否为排它队列</param>
            <param name="autoDelete">是否自动删除</param>
            <param name="arguments">参数</param>
        </member>
        <member name="M:NetMonitor.Client.MQ.RabbitMQ.RabbitMQClient.Publish``1(``0,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            发送消息
            </summary>
            <typeparam name="T">消息类型</typeparam>
            <param name="command">消息内容</param>
            <param name="exchangeName">交换机名字</param>
            <param name="queueName">队列名</param>
            <param name="routingKey">路由关键字</param>
            <param name="exchangeType">交换机类型</param>
            <param name="durable">是否持久化</param>
            <param name="autoDelete">是否自动删除</param>
            <param name="exclusive">是否申明为排它队列</param>
            <param name="arguments">参数</param>
        </member>
        <member name="M:NetMonitor.Client.MQ.RabbitMQ.RabbitMQClient.Subscribe``1(System.Action{``0},System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{``0,System.Exception},System.String,System.String)">
            <summary>
            订阅消息
            </summary>
            <typeparam name="T">消息类型</typeparam>
            <param name="actionHandle">处理该类型消息的方法</param>
            <param name="exchangeName">交换机名字</param>
            <param name="queueName">队列名</param>
            <param name="routingKey">路由关键字</param>
            <param name="exchangeType">交换机类型</param>
            <param name="durable">是否持久化</param>
            <param name="autoDelete">是否自动删除</param>
            <param name="exclusive">是否申明为排它队列</param>
            <param name="arguments">参数</param>
            <param name="errorActionHandle">处理消息时发生错误时处理方法</param>
            <param name="memberName">调用成员信息</param>
            <param name="loggerName">记录器名字</param>
        </member>
        <member name="T:NetMonitor.Client.MQ.RabbitMQ.RabbitMQConnectionFactory">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：RabbitMQConnectionFactory.cs
            类属性：局部类（非静态）
            类功能描述：RabbitMQConnectionFactory
            创建标识：yjq 2017/7/17 16:54:48
            </summary>
        </member>
        <member name="M:NetMonitor.Client.MQ.RabbitMQ.RabbitMQConnectionFactory.GetConn(NetMonitor.Client.MQ.MQConfig)">
            <summary>
            获取mq连接信息
            </summary>
            <param name="mqConfig">配置信息</param>
            <returns></returns>
        </member>
        <member name="M:NetMonitor.Client.MQ.RabbitMQ.RabbitMQConnectionFactory.DisposeConn">
            <summary>
            释放连接
            </summary>
        </member>
        <member name="T:NetMonitor.Client.MQ.RabbitMQ.RabbitMQFactory">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：RabbitMQFactory.cs
            类属性：局部类（非静态）
            类功能描述：
            创建标识：yjq 2017/7/17 17:46:41
            </summary>
        </member>
        <member name="M:NetMonitor.Client.MQ.RabbitMQ.RabbitMQFactory.Create(NetMonitor.Client.MQ.MQConfig)">
            <summary>
            创建一个RabbitMq客户端
            </summary>
            <param name="mqConfig">mq配置信息</param>
            <returns>RabbitMq客户端</returns>
        </member>
        <member name="T:NetMonitor.Client.MQ.Serialization.IMQBinarySerializer">
            <summary>
            Copyright (C) 2017 yjq 版权所有。
            类名：IMQBinarySerializer.cs
            类属性：局部类（非静态）
            类功能描述：IMQBinarySerializer接口
            创建标识：yjq 2017/7/17 16:10:28
            </summary>
        </member>
        <member name="M:NetMonitor.Client.MQ.Serialization.IMQBinarySerializer.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="serializedObject">字节数组</param>
            <returns>对象</returns>
        </member>
        <member name="M:NetMonitor.Client.MQ.Serialization.IMQBinarySerializer.DeserializeAsync``1(System.Byte[])">
            <summary>
            异步反序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="serializedObject">字节数组</param>
            <returns>对象</returns>
        </member>
        <member name="M:NetMonitor.Client.MQ.Serialization.IMQBinarySerializer.Serialize``1(``0)">
            <summary>
            序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="item">对象值</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:NetMonitor.Client.MQ.Serialization.IMQBinarySerializer.SerializeAsync``1(``0)">
            <summary>
            异步序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="item">对象值</param>
            <returns>字节数组</returns>
        </member>
        <member name="T:NetMonitor.Client.MQ.Serialization.MQProtobufBinarySerializer">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：MQProtobufBinarySerializer.cs
            类属性：公共类（非静态）
            类功能描述：Protobuf序列化
            创建标识：yjq 2017/7/17 16:11:16
            </summary>
        </member>
        <member name="M:NetMonitor.Client.MQ.Serialization.MQProtobufBinarySerializer.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="serializedObject">字节数组</param>
            <returns>对象</returns>
        </member>
        <member name="M:NetMonitor.Client.MQ.Serialization.MQProtobufBinarySerializer.DeserializeAsync``1(System.Byte[])">
            <summary>
            异步反序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="serializedObject">字节数组</param>
            <returns>对象</returns>
        </member>
        <member name="M:NetMonitor.Client.MQ.Serialization.MQProtobufBinarySerializer.Serialize``1(``0)">
            <summary>
            序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="item">对象值</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:NetMonitor.Client.MQ.Serialization.MQProtobufBinarySerializer.SerializeAsync``1(``0)">
            <summary>
            异步序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="item">对象值</param>
            <returns>字节数组</returns>
        </member>
        <member name="T:NetMonitor.Client.SubscribeTask">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：SubscribeInfo.cs
            类属性：公共类（非静态）
            类功能描述：监听详情
            创建标识：yjq 2017/7/18 16:45:59
            </summary>
        </member>
        <member name="P:NetMonitor.Client.SubscribeTask.TaskId">
            <summary>
            任务ID
            </summary>
        </member>
        <member name="P:NetMonitor.Client.SubscribeTask.TaskType">
            <summary>
            订阅任务类型
            </summary>
        </member>
        <member name="M:NetMonitor.Client.SubscribeTask.DisposeCode">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:NetMonitor.Client.SubscribeTask.ToString">
            <summary>
            输出任务信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetMonitor.Client.SubscribeTaskType">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：SubscribeTaskType.cs
            类属性：公共类（非静态）
            类功能描述：订阅任务类型
            创建标识：yjq 2017/7/19 10:25:29
            </summary>
        </member>
        <member name="F:NetMonitor.Client.SubscribeTaskType.Logger">
            <summary>
            日志
            </summary>
        </member>
        <member name="F:NetMonitor.Client.SubscribeTaskType.Sql">
            <summary>
            Sql
            </summary>
        </member>
        <member name="F:NetMonitor.Client.SubscribeTaskType.Browse">
            <summary>
            浏览
            </summary>
        </member>
        <member name="T:NetMonitor.Client.Utils.ConfigWacherUtil">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：ConfigWacherUtil.cs
            类属性：局部类（非静态）
            类功能描述：文件监听
            创建标识：yjq 2017/7/18 14:40:50
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Utils.ConfigWacherUtil.Install(System.String)">
            <summary>
            启动监听
            </summary>
            <param name="configFilePath">appconfig文件路径</param>
        </member>
        <member name="T:NetMonitor.Client.Utils.EnsureUtil">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：EnsureUtil.cs
            类属性：局部类（非静态）
            类功能描述：
            创建标识：yjq 2017/7/17 17:02:32
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Utils.EnsureUtil.NotNull``1(``0,System.String)">
            <summary>
            判断值不为空
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">要判断的值</param>
            <param name="argument">字段</param>
        </member>
        <member name="M:NetMonitor.Client.Utils.EnsureUtil.NotNullAndNotEmptyWhiteSpace(System.Object,System.String)">
            <summary>
            判断字符串不是 null、空、不是由空白字符组成。
            </summary>
            <param name="input">要判断的字符</param>
            <param name="msg">字段</param>
        </member>
        <member name="T:NetMonitor.Client.Utils.ExceptionUtil">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：ExceptionUtil.cs
            类属性：局部类（非静态）
            类功能描述：
            创建标识：yjq 2017/7/17 17:17:35
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Utils.ExceptionUtil.LogException(System.Action,System.String)">
            <summary>
            忽略异常，但记录异常
            </summary>
            <param name="action">执行的方法</param>
            <param name="memberName">调用成员信息</param>
        </member>
        <member name="M:NetMonitor.Client.Utils.ExceptionUtil.LogExceptionAsync(System.Func{System.Threading.Tasks.Task},System.String)">
            <summary>
            忽略异常，但记录异常
            </summary>
            <param name="action">执行的方法</param>
            <param name="memberName">调用成员信息</param>
            <returns>可等待</returns>
        </member>
        <member name="M:NetMonitor.Client.Utils.ExceptionUtil.LogException``1(System.Func{``0},``0,System.String)">
            <summary>
            忽略异常，但记录异常
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="action">执行的方法</param>
            <param name="defaultValue">默认返回值</param>
            <param name="memberName">调用成员信息</param>
            <returns>如果没异常，返回值就是正常返回值，假如出现了异常，返回值就是默认的值</returns>
        </member>
        <member name="M:NetMonitor.Client.Utils.ExceptionUtil.LogExceptionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},``0,System.String)">
            <summary>
            忽略异常，但记录异常
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="action">执行的方法</param>
            <param name="defaultValue">默认返回值</param>
            <param name="memberName">调用成员信息</param>
            <returns>如果没异常，返回值就是正常返回值，假如出现了异常，返回值就是默认的值</returns>
        </member>
        <member name="T:NetMonitor.Client.Utils.FileWatchUtil">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：FileWatchUtil.cs
            类属性：局部类（非静态）
            类功能描述：文件监听类
            创建标识：yjq 2017/7/18 14:36:16
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Utils.FileWatchUtil.#ctor(System.String,System.Action{System.IO.FileStream},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="filePath">文件路径</param>
            <param name="action">文件改变后的执行的方法</param>
            <param name="timeOutMillis">延迟时间</param>
            <param name="isStart">是否启动监听</param>
        </member>
        <member name="M:NetMonitor.Client.Utils.FileWatchUtil.#ctor(System.IO.FileInfo,System.Action{System.IO.FileStream},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="fileInfo">文件信息</param>
            <param name="action">文件改变后的执行的方法</param>
            <param name="timeOutMillis">延迟时间</param>
            <param name="isStart">是否启动监听</param>
        </member>
        <member name="M:NetMonitor.Client.Utils.FileWatchUtil.UnInstall">
            <summary>
            释放所有的监听文件程序(停止运行时调用)
            </summary>
        </member>
        <member name="T:NetMonitor.Client.Utils.LogUtil">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：LogUtil.cs
            类属性：局部类（非静态）
            类功能描述：日志帮助
            创建标识：yjq 2017/7/17 17:20:02
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Utils.LogUtil.GetPath">
            <summary>
            获取基础路径
            </summary>
            <returns>基础日志路径</returns>
        </member>
        <member name="M:NetMonitor.Client.Utils.LogUtil.WriteLog(System.String,System.String)">
            <summary>
            写日志
            </summary>
            <param name="msg">日志内容</param>
            <param name="memberName">调用方法</param>
        </member>
        <member name="M:NetMonitor.Client.Utils.LogUtil.WriteLog(System.Exception,System.String)">
            <summary>
            写日志
            </summary>
            <param name="ex">异常信息</param>
            <param name="memberName">调用方法</param>
        </member>
        <member name="M:NetMonitor.Client.Utils.LogUtil.WriteLog(System.String,System.Exception,System.String)">
            <summary>
            写日志
            </summary>
            <param name="msg">描述</param>
            <param name="ex">异常</param>
            <param name="memberName">调用方法</param>
        </member>
        <member name="M:NetMonitor.Client.Utils.LogUtil.AddMessage(System.String)">
            <summary>
            添加要发送的信息
            </summary>
            <param name="logMessage"></param>
        </member>
        <member name="F:NetMonitor.Client.Utils.LogUtil._MessageBuilder">
            <summary>
            消息列表
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Utils.LogUtil.MessageHandle(System.String)">
            <summary>
            信息处理的方法
            </summary>
            <param name="message">要处理的信息</param>
        </member>
        <member name="M:NetMonitor.Client.Utils.LogUtil.HaveNoCountHandle">
            <summary>
            没有新消息的时候处理方法
            </summary>
        </member>
        <member name="T:NetMonitor.Client.Utils.MessageUtil">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：MessageUtil.cs
            类属性：局部类（非静态）
            类功能描述：消息工具
            创建标识：yjq 2017/7/18 9:27:02
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Utils.MessageUtil.GetConfig">
            <summary>
            获取MQLoggerConfig的服务器配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetMonitor.Client.Utils.MessageUtil.SendMessage``1(``0,System.String,System.String,System.String)">
             <summary>
            发送消息
             </summary>
             <typeparam name="T">消息类型</typeparam>
             <param name="message">消息信息</param>
             <param name="queueName">队列名字</param>
             <param name="exchangeName">交换机名字</param>
             <param name="routeKey">路由Key</param>
        </member>
        <member name="M:NetMonitor.Client.Utils.MessageUtil.SubscribeMessage``1(System.Action{``0},System.String,System.String,System.String,System.String)">
            <summary>
            订阅消息
            </summary>
            <typeparam name="T">消息类型</typeparam>
            <param name="handle">处理方法</param>
            <param name="queueName">队列名字</param>
            <param name="exchangeName">交换机名字</param>
            <param name="routeKey">路由Key</param>
            <param name="memberName">方法名字</param>
        </member>
        <member name="T:NetMonitor.Client.Utils.MQUtil">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：MQUtil.cs
            类属性：局部类（非静态）
            类功能描述：MQ的工具
            创建标识：yjq 2017/7/18 10:35:49
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Utils.MQUtil.GetClient(NetMonitor.Client.MQ.MQConfig)">
            <summary>
            获取客户端
            </summary>
            <param name="config">配置信息</param>
            <returns>IMQClient</returns>
        </member>
        <member name="T:NetMonitor.Client.Utils.WebUtil">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：WebUtil.cs
            类属性：局部类（静态）
            类功能描述：
            创建标识：yjq 2017/7/17 15:37:29
            </summary>
        </member>
        <member name="M:NetMonitor.Client.Utils.WebUtil.GetRealIP">
            <summary>
            获取当前网络IP
            </summary>
            <returns>当前网络IP</returns>
        </member>
        <member name="M:NetMonitor.Client.Utils.WebUtil.GetUserAgent">
            <summary>
            获取客户端浏览器的原始用户代理信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetMonitor.Client.Utils.WebUtil.IsHaveHttpContext">
            <summary>
            判断是否有网络请求上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetMonitor.Client.Utils.WebUtil.GetHttpRequestUrl">
            <summary>
            获取请求地址
            </summary>
            <returns>请求地址</returns>
        </member>
        <member name="M:NetMonitor.Client.Utils.WebUtil.GetAbsoluteUrl">
            <summary>
            获取绝对Uri
            </summary>
            <returns>请求的绝对Uri</returns>
        </member>
        <member name="M:NetMonitor.Client.Utils.WebUtil.GetReferrerUrl">
            <summary>
            获取请求源的URL
            </summary>
            <returns>请求的绝对Uri</returns>
        </member>
        <member name="M:NetMonitor.Client.Utils.WebUtil.GetHttpMethod">
            <summary>
            获取请求类型
            </summary>
            <returns>请求类型</returns>
        </member>
        <member name="M:NetMonitor.Client.Utils.WebUtil.GetRequestData">
            <summary>
            获取请求内容
            </summary>
            <returns>请求内容</returns>
        </member>
        <member name="T:NetMonitor.Client.WebSitePort">
            <summary>
            Copyright (C) 2015 备胎 版权所有。
            类名：WebSitePort.cs
            类属性：公共类（非静态）
            类功能描述：站点端口
            创建标识：yjq 2017/7/17 15:41:38
            </summary>
        </member>
        <member name="F:NetMonitor.Client.WebSitePort.IOS">
            <summary>
            IOS
            </summary>
        </member>
        <member name="F:NetMonitor.Client.WebSitePort.Andiro">
            <summary>
            Andiro
            </summary>
        </member>
        <member name="F:NetMonitor.Client.WebSitePort.WebManage">
            <summary>
            后台
            </summary>
        </member>
        <member name="F:NetMonitor.Client.WebSitePort.PC">
            <summary>
            PC
            </summary>
        </member>
        <member name="F:NetMonitor.Client.WebSitePort.Api">
            <summary>
            接口
            </summary>
        </member>
        <member name="F:NetMonitor.Client.WebSitePort.Other">
            <summary>
            其它
            </summary>
        </member>
    </members>
</doc>
